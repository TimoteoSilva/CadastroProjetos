@page "/layouts"
@attribute [Authorize]
@using Falcare.Projetos.App.Data
@using Falcare.Projetos.App.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@inject AppDbContext Db
@inject UserManager<ApplicationUser> UserMgr
@inject AuthenticationStateProvider AuthState

<h3>Cadastro Layout</h3>

@if (showEditModal && layoutEdicao is not null)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog modal-lg modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @(layoutEdicao.LayoutCadastroId == 0 ? "Novo Layout" : $"Editar {layoutEdicao.Codigo}")
                    </h5>
                    <button type="button" class="btn-close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="layoutEdicao" OnValidSubmit="Salvar">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        @if (!string.IsNullOrEmpty(erroCodigo))
                        {
                            <div class="text-danger mb-2">@erroCodigo</div>
                        }
                        @if (!string.IsNullOrEmpty(erroTipo))
                        {
                            <div class="text-danger mb-2">@erroTipo</div>
                        }

                        <div class="row g-2">
                            <div class="col-md-4">
                                <label>Código</label>
                                <InputText class="form-control" @bind-Value="layoutEdicao.Codigo" readonly />
                                <small class="text-muted">Gerado automaticamente (FAC-L0000).</small>
                            </div>

                            <div class="col-md-8">
                                <label>Projeto (Ordem)</label>
                                <InputSelect class="form-select" @bind-Value="layoutEdicao.ProjetoId">
                                    @foreach (var p in projetos)
                                    {
                                        <option value="@p.ProjetoId">@p.Ordem - @p.Titulo</option>
                                    }
                                </InputSelect>
                                @if (projetos.Count == 0)
                                {
                                    <small class="text-muted">Nenhum projeto em Engenharia disponível.</small>
                                }
                            </div>

                            <div class="col-md-8">
                                <label>Título</label>
                                <InputText class="form-control" maxlength="60" @bind-Value="layoutEdicao.Titulo" />
                            </div>

                            <div class="col-md-4">
                                <label>Tipo</label>
                                <InputSelect class="form-select" @bind-Value="layoutEdicao.Tipo">
                                    <option value="2D">2D</option>
                                    <option value="3D">3D</option>
                                </InputSelect>
                            </div>

                            <div class="col-md-6">
                                <label>Autor</label>
                                <InputSelect class="form-select" @bind-Value="layoutEdicao.AutorUserId">
                                    @foreach (var u in usuarios)
                                    {
                                        <option value="@u.Id">@MostrarUsuario(u)</option>
                                    }
                                </InputSelect>
                            </div>

                            <div class="col-md-6">
                                <label>Data</label>
                                <InputDate TValue="DateOnly" class="form-control" @bind-Value="layoutEdicao.Data" />
                            </div>
                        </div>

                        <div class="mt-3">
                            <button type="submit" class="btn btn-success">Salvar</button>
                            <button type="button" class="btn btn-secondary ms-2" @onclick="Cancelar">Cancelar</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<div class="row">
    <div class="col-12">
        <div class="d-flex gap-2 align-items-center">
            <input class="form-control" placeholder="Filtrar por código / título / ordem..." @bind="filtro" />
            <button class="btn btn-primary" @onclick="Novo">Novo</button>
        </div>

        <div class="table-responsive mt-3">
            <table class="table table-striped" style="min-width: 1000px;">
                <thead>
                    <tr>
                        <th>Código</th>
                        <th>Ordem</th>
                        <th>Título</th>
                        <th>Tipo</th>
                        <th>Autor</th>
                        <th>Data</th>
                        <th>Atualizado</th>
                        <th style="width:120px;"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var l in layoutsFiltrados)
                    {
                        <tr @key="l.LayoutCadastroId">
                            <td>@l.Codigo</td>
                            <td>@l.Projeto?.Ordem</td>
                            <td>@l.Titulo</td>
                            <td>@l.Tipo</td>
                            <td>@(usuariosDict.TryGetValue(l.AutorUserId, out var nome) ? nome : l.AutorUserId)</td>
                            <td>@l.Data.ToString("dd/MM/yyyy")</td>
                            <td>@l.DataUltimaAtualizacao.ToLocalTime().ToString("g")</td>
                            <td class="text-end">
                                <button class="btn btn-sm btn-outline-secondary me-1"
                                        @onclick="async () => await Editar(l.LayoutCadastroId)">
                                    Editar
                                </button>
                                <button class="btn btn-sm btn-outline-danger"
                                        @onclick="() => Excluir(l.LayoutCadastroId)">
                                    Excluir
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    // estado/coleções
    string filtro = "";
    string? erroCodigo, erroTipo;

    List<LayoutCadastro> layouts = new();
    List<Projeto> projetos = new(); // SOMENTE projetos com Status "Engenharia" (com exceção do selecionado em edição)
    List<ApplicationUser> usuarios = new();
    Dictionary<string, string> usuariosDict = new();

    LayoutCadastro? layoutEdicao;
    bool showEditModal = false;

    IEnumerable<LayoutCadastro> layoutsFiltrados =>
        string.IsNullOrWhiteSpace(filtro) ? layouts :
        layouts.Where(l =>
            (l.Codigo?.Contains(filtro, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (l.Titulo?.Contains(filtro, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (l.Projeto?.Ordem?.Contains(filtro, StringComparison.OrdinalIgnoreCase) ?? false)
        );

    protected override async Task OnInitializedAsync()
    {
        await CarregarBase();
    }

    async Task CarregarBase()
    {
        // PROJETOS: apenas os com Status = "Engenharia"
        projetos = await Db.Projetos.AsNoTracking()
                    .Include(p => p.Status)
                    .Where(p => p.Status!.Nome == "Engenharia")
                    .OrderBy(p => p.Ordem)
                    .ToListAsync();

        // USUÁRIOS
        usuarios = await UserMgr.Users.AsNoTracking()
                    .OrderBy(u => u.Nome ?? u.Email ?? u.UserName)
                    .ToListAsync();

        usuariosDict = usuarios.ToDictionary(
            u => u.Id,
            u => string.IsNullOrWhiteSpace(u.Nome) ? (u.Email ?? u.UserName ?? "-") : u.Nome
        );

        // LISTA DE LAYOUTS
        layouts = await Db.LayoutsCadastro.AsNoTracking()
                    .Include(l => l.Projeto)
                    .Include(l => l.Autor)
                    .OrderByDescending(l => l.DataUltimaAtualizacao)
                    .ToListAsync();
    }

    // Garante que, ao editar, o projeto já selecionado apareça no dropdown
    async Task EnsureProjetoNoDropdown(int projetoId)
    {
        if (projetoId == 0) return;
        if (!projetos.Any(p => p.ProjetoId == projetoId))
        {
            var pSel = await Db.Projetos.AsNoTracking()
                         .Include(p => p.Status)
                         .FirstOrDefaultAsync(p => p.ProjetoId == projetoId);
            if (pSel is not null)
            {
                projetos.Add(pSel);
                projetos = projetos.OrderBy(p => p.Ordem).ToList();
            }
        }
    }

    string MostrarUsuario(ApplicationUser u) =>
        string.IsNullOrWhiteSpace(u.Nome) ? (u.Email ?? u.UserName ?? u.Id) : u.Nome;

    void Novo()
    {
        layoutEdicao = new LayoutCadastro
        {
            Data = DateOnly.FromDateTime(DateTime.Today),
            ProjetoId = projetos.FirstOrDefault()?.ProjetoId ?? 0,
            AutorUserId = usuarios.FirstOrDefault()?.Id ?? string.Empty,
            Tipo = "2D"
        };
        erroCodigo = erroTipo = null;

        _ = GerarCodigoParaNovoAsync();

        showEditModal = true;
    }

    async Task GerarCodigoParaNovoAsync()
    {
        if (layoutEdicao is null) return;

        var codigos = await Db.LayoutsCadastro.AsNoTracking()
                        .Select(l => l.Codigo)
                        .ToListAsync();

        var usados = new HashSet<int>();
        foreach (var c in codigos)
        {
            if (string.IsNullOrWhiteSpace(c)) continue;
            if (c.Length >= 9 && c.StartsWith("FAC-L", StringComparison.OrdinalIgnoreCase))
            {
                var numPart = c[^4..];
                if (int.TryParse(numPart, out var n) && n is >= 0 and <= 9999)
                    usados.Add(n);
            }
        }

        int next = -1;
        for (int i = 0; i <= 9999; i++)
            if (!usados.Contains(i)) { next = i; break; }

        if (next < 0)
        {
            erroCodigo = "Não há números disponíveis (0000–9999 já usados).";
            layoutEdicao.Codigo = "FAC-L----";
            StateHasChanged();
            return;
        }

        layoutEdicao.Codigo = $"FAC-L{next:0000}";
        StateHasChanged();
    }

    async Task Editar(int id)
    {
        layoutEdicao = await Db.LayoutsCadastro
            .Include(l => l.Projeto)
            .Include(l => l.Autor)
            .FirstAsync(l => l.LayoutCadastroId == id);

        erroCodigo = erroTipo = null;

        // garante que o projeto atualmente selecionado apareça no dropdown,
        // mesmo que não esteja mais em "Engenharia"
        await EnsureProjetoNoDropdown(layoutEdicao.ProjetoId);

        showEditModal = true;
    }

    async Task Salvar()
    {
        if (layoutEdicao is null) return;

        // valida tipo
        erroTipo = null;
        if (layoutEdicao.Tipo != "2D" && layoutEdicao.Tipo != "3D")
        {
            erroTipo = "Tipo inválido. Use 2D ou 3D.";
            return;
        }

        // valida código único e formato
        erroCodigo = null;
        if (string.IsNullOrWhiteSpace(layoutEdicao.Codigo) || !System.Text.RegularExpressions.Regex.IsMatch(layoutEdicao.Codigo, "^FAC-L\\d{4}$"))
        {
            erroCodigo = "Código inválido. Formato esperado: FAC-L0000.";
            return;
        }

        var codigoDuplicado = await Db.LayoutsCadastro.AsNoTracking()
            .AnyAsync(x => x.Codigo == layoutEdicao.Codigo && x.LayoutCadastroId != layoutEdicao.LayoutCadastroId);
        if (codigoDuplicado)
        {
            erroCodigo = $"Código {layoutEdicao.Codigo} já existe.";
            return;
        }

        layoutEdicao.DataUltimaAtualizacao = DateTime.UtcNow;

        if (layoutEdicao.LayoutCadastroId == 0)
        {
            Db.LayoutsCadastro.Add(layoutEdicao);
            await Db.SaveChangesAsync();
        }
        else
        {
            var tracked = await Db.LayoutsCadastro
                .FirstAsync(x => x.LayoutCadastroId == layoutEdicao.LayoutCadastroId);

            Db.Entry(tracked).CurrentValues.SetValues(layoutEdicao);
            await Db.SaveChangesAsync();
        }

        await RecarregarEFechar();
    }

    async Task Excluir(int id)
    {
        var ent = await Db.LayoutsCadastro.FirstAsync(x => x.LayoutCadastroId == id);
        Db.LayoutsCadastro.Remove(ent);
        await Db.SaveChangesAsync();

        await CarregarBase();
        StateHasChanged();
    }

    async Task RecarregarEFechar()
    {
        showEditModal = false;
        layoutEdicao = null;
        await CarregarBase();
        StateHasChanged();
    }

    void Cancelar()
    {
        showEditModal = false;
        layoutEdicao = null;
        erroCodigo = erroTipo = null;
    }
}
